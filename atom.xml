<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mob999.github.io</id>
    <title>mob的什么都不懂小站</title>
    <updated>2024-09-11T01:15:12.318Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mob999.github.io"/>
    <link rel="self" href="https://mob999.github.io/atom.xml"/>
    <subtitle>mob</subtitle>
    <logo>https://mob999.github.io/images/avatar.png</logo>
    <icon>https://mob999.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, mob的什么都不懂小站</rights>
    <entry>
        <title type="html"><![CDATA[Mobility-aware Computation Offloading with Load Balancing in Smart City Networks using MEC Federation]]></title>
        <id>https://mob999.github.io/post/mobility-aware-computation-offloading-with-load-balancing-in-smart-city-networks-using-mec-federation/</id>
        <link href="https://mob999.github.io/post/mobility-aware-computation-offloading-with-load-balancing-in-smart-city-networks-using-mec-federation/">
        </link>
        <updated>2024-09-02T07:57:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用联合移动边缘计算的智能城市网络中具有负载平衡的移动感知计算卸载">使用联合移动边缘计算的智能城市网络中具有负载平衡的移动感知计算卸载</h1>
<ul>
<li>2024-TMC</li>
</ul>
<h2 id="abstract">Abstract</h2>
<ul>
<li>研究联合移动边缘计算中的计算卸载，任务迁移和资源分配问题；</li>
<li>目标是在企业长期迁移成本预算的约束下，在保持负载平衡的同时，最小化延迟和资源消耗的加权和；</li>
<li>两个子问题：
<ol>
<li>MDs聚类问题（根据信道增益的差异聚类）；</li>
<li>联合计算卸载，任务迁移和资源分配问题（基于Lyapunov优化，基于Transformer的移动性预测和基于DDPG的框架）；</li>
</ol>
</li>
</ul>
<h2 id="introduction">Introduction</h2>
<ul>
<li>边缘服务器并不一定属于同一个边缘服务提供商（EIP），频繁的任务切换会导致较高的操作成本，所以应该同时考虑MEC联盟的负载均衡和EIP的成本。</li>
</ul>
<h2 id="contribution">Contribution</h2>
<ul>
<li>定义动态工作环境（即随机信道条件和时变的任务到达）中的计算卸载，任务迁移和资源分配问题。优化的目标是在EIP的长期迁移成本预算的约束下，在保持负载平衡的同时，最小化加权延迟和长期能耗；</li>
<li><a href="#abstract">见Abstract的两个子问题</a>；</li>
<li><strong>基于真实世界的数据集</strong>和大量<strong>仿真实验</strong>；</li>
</ul>
<h2 id="model">Model</h2>
<ul>
<li><img src="https://mob999.github.io/post-images/1725333225819.png" alt="" loading="lazy"></li>
</ul>
<h2 id="algorithm">Algorithm</h2>
<ol>
<li>MD聚类算法（根据信道增益差异聚类）；</li>
<li>Lyapunov优化（由于系统的动态性和随机性，引入虚拟赤字队列，保持cost队列的稳定，取得性能和迁移成本的平衡）；</li>
<li>基于Transformer的移动性预测模型（TMP）：
<ul>
<li>根据边缘服务器的历史移动设备数量预测移动设备的数量分布；</li>
<li>利用改进后的Transformer架构，模型可以有效捕获移动设备移动性数据的时空关联性，提升预测精度；</li>
<li>模型在云中心离线训练，部署于边缘服务器；</li>
<li>分为编码器和解码器：<img src="https://mob999.github.io/post-images/1725439660109.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>MDP建模</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BARGAIN-MATCH: A Game Theoretical Approach for Resource Allocation and Task Offloading in Vehicular Edge Computing Networks]]></title>
        <id>https://mob999.github.io/post/bargain-match-a-game-theoretical-approach-for-resource-allocation-and-task-offloading-in-vehicular-edge-computing-networks/</id>
        <link href="https://mob999.github.io/post/bargain-match-a-game-theoretical-approach-for-resource-allocation-and-task-offloading-in-vehicular-edge-computing-networks/">
        </link>
        <updated>2024-09-02T01:04:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="bargain-match车辆边缘计算网络中资源分配和任务卸载的博弈论方法">BARGAIN-MATCH：车辆边缘计算网络中资源分配和任务卸载的博弈论方法</h1>
<ul>
<li>2024-TMC</li>
</ul>
<h2 id="abstract">Abstract</h2>
<ul>
<li>车辆边缘计算（VEC）需要有效的资源管理和任务卸载方案；</li>
<li>提出分层框架，协调任务和服务器之间的异构性，以提高资源利用率和服务满意度；</li>
<li>提出联合资源分配和任务卸载问题（JRATOP），共同优化边缘服务器内部的资源分配和边缘服务器与云服务器之间的负载平衡；</li>
<li>由于JRATOP是NP困难的，提出BARGAIN-MATCH算法。</li>
</ul>
<h2 id="contributions">Contributions</h2>
<ul>
<li>提出资源分配和任务卸载的分层架构以协调<strong>任务的时空需求异质性</strong>和<strong>服务的计算异构性</strong>；</li>
<li>通过联合优化资源分配和定价以及任务卸载策略，提出了联合资源分配和任务卸载问题（JRATOP）， 通过综合VN信道、非正交多址（NOMA）、车辆的移动性、任务的时空异质性等独特特征，从理论上建模的系统效用 、服务器的计算异构性和节点的能源消耗；</li>
<li>提出由两个模块构成的BARGAIN-MATCH算法：对于边缘服务器内部的资源分配，提出了一种基于博弈论的激励方法，以促进任务和服务器的合作；对于服务器之间的任务卸载，在任务和服务器之间构建了多对一匹配，刺激水平任务卸载的边缘-边缘协作，以及针对垂直任务卸载的边缘-云协作。</li>
</ul>
<h2 id="models">Models</h2>
<ul>
<li><img src="https://mob999.github.io/post-images/1725241696300.png" alt="" loading="lazy"></li>
</ul>
<h2 id="bargain-match">Bargain Match</h2>
<h3 id="服务器内部的资源分配与定价">服务器内部的资源分配与定价</h3>
<ul>
<li>通过分别计算车辆和服务器的效用，获得最优分配和定价策略。</li>
</ul>
<h3 id="服务器之间的任务卸载">服务器之间的任务卸载</h3>
<ul>
<li>一种基于匹配的方案；</li>
<li>偏好列表（任务对服务器的偏好，服务器对任务的偏好）；</li>
<li>一个任务匹配一个服务器，一个服务器匹配多个任务；</li>
</ul>
<h3 id="算法流程">算法流程</h3>
<ul>
<li><img src="https://mob999.github.io/post-images/1725261844786.png" alt="" loading="lazy"></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Secure and Optimized Load Balancing for Multitier IoT and Edge-Cloud Computing Systems]]></title>
        <id>https://mob999.github.io/post/secure-and-optimized-load-balancing-for-multitier-iot-and-edge-cloud-computing-systems/</id>
        <link href="https://mob999.github.io/post/secure-and-optimized-load-balancing-for-multitier-iot-and-edge-cloud-computing-systems/">
        </link>
        <updated>2024-06-06T09:24:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="针对多层物联网和边缘云计算系统的安全和优化的负载平衡">针对多层物联网和边缘云计算系统的安全和优化的负载平衡</h1>
<ul>
<li>2021-Internet of Things Journal（IOTJ）</li>
</ul>
<h2 id="abstract">Abstract</h2>
<ul>
<li>通过卸载计算密集任务到MEC服务器上，解决用户设备资源不足的情况；</li>
<li>但是当前大部分卸载策略都将用户任务卸载到连接的SBS上，会增加延迟和导致过载；</li>
<li>没有解决信息敏感的安全问题；</li>
<li>提出一种联合负载均衡和计算卸载的技术，还增加了一个安全层；</li>
</ul>
<h2 id="contributions">Contributions</h2>
<ol>
<li>提出了一种在SBS之间重新分配用户设备的负载均衡算法，该算法根据其位置、当前用户数量、每个用户任务的CPU周期和上行数据速率，将部分用户移交给最佳可用的SBS；</li>
<li>引入了一种基于基于心电信号的加密和解密密钥的AES加密技术，以保护数据在传输过程中的脆弱性；</li>
<li>一个针对多用户、多任务、多层、移动边缘云计算系统结合负载平衡和计算卸载（LBCO）的优化问题，目的是克服资源约束，通过更少的开销。</li>
<li>设计了一种安全的LBCO算法，该算法提供了全面的细节，以高效的方式和更少的开销获得问题的最优解决方案。</li>
</ol>
<h2 id="architecture">Architecture</h2>
<figure data-type="image" tabindex="1"><img src="https://mob999.github.io/post-images/1717667233771.png" alt="" loading="lazy"></figure>
<h2 id="goal">Goal</h2>
<ul>
<li>减少系统调度和分配多用户任务所需的时间需求和开销。</li>
</ul>
<h2 id="load-balancing">Load Balancing</h2>
<p><img src="https://mob999.github.io/post-images/1717667607944.png" alt="" loading="lazy"><br>
<img src="https://mob999.github.io/post-images/1717667862588.png" alt="" loading="lazy"></p>
<h2 id="method">Method</h2>
<ul>
<li>branch and bound（分支定界法）。</li>
</ul>
<h2 id="experiment">Experiment</h2>
<ul>
<li>Simulation: Matlab;</li>
<li>Dataset: ECG-ID database;</li>
<li>Policies:
<ol>
<li>Unsecure LBCO（去除安全层）；</li>
<li>Secure LBCO；</li>
<li>CO（不考虑handover）；</li>
<li>LE（不卸载，均在本地进行）；</li>
<li>FO（全部卸载）</li>
</ol>
</li>
<li>Metric：System Cost</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Efficient Cache Consistency Management for Transient IoT Data in Content-Centric Networking]]></title>
        <id>https://mob999.github.io/post/efficient-cache-consistency-management-for-transient-iot-data-in-content-centric-networking/</id>
        <link href="https://mob999.github.io/post/efficient-cache-consistency-management-for-transient-iot-data-in-content-centric-networking/">
        </link>
        <updated>2024-06-03T06:45:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="对内容中心网络中瞬态物联网数据的高效缓存一致性管理">对内容中心网络中瞬态物联网数据的高效缓存一致性管理</h1>
<ul>
<li>注：内容中心网络（CCN）是一种面向内容共享的通信架构，其可基于内容名字进行数据共享和交换，而不需要关心特定的物理地址和主机，利用网络内置缓存提高传输效率，而不关心数据存储位置，通过发布／订阅模式请求数据，使供给者和消费者在空间、时间上解耦合。</li>
</ul>
<h2 id="abstract">Abstract</h2>
<ul>
<li>物联网数据更新快，CCN路由器容易保存过时的内容副本。</li>
<li>提出基于内容流行度的内容一致性管理方案，确保路由器返回新鲜副本以及避免引入过高的通信成本。</li>
</ul>
<h2 id="introduction">Introduction</h2>
<ul>
<li>CCN路由器的缓存替换十分频繁，导致内容一致性很低，且追踪内容来源的成本高，有大量的更新通知。</li>
<li>无来源支持的情况下，无法判断数据是否更新。</li>
<li>基于内容流行度的缓存一致性管理（PCCM），对流行数据保持很高的一致性（网络内缓存），对不流行数据提供弱一致性（路由器内高频率的缓存替换）。</li>
<li>动态更新流行度，及时清理过时数据。</li>
</ul>
<h2 id="related-works">Related Works</h2>
<h3 id="content-consistency">Content Consistency</h3>
<ul>
<li>分为强、弱方案。强方案保证不会提供过期数据，但不可避免地提供过时数据，以及带来更大的通信开销。</li>
<li>设备发出的一致性检查，可分为<strong>服务器失效</strong>和<strong>缓存验证</strong>。</li>
<li>服务器失效：服务器跟踪内容副本，一旦内容更新，则发起通知（Strong）。</li>
<li>缓存验证，分为每次轮询（<strong>PET</strong>）和生存时间（<strong>TTL</strong>）。PET每次都会验证副本的新鲜度，直到确认副本为最新时才将副本分发给用户（Strong）。TTL将过期时间认为新鲜度，只要副本未过期，则分发给用户（Weak）。</li>
</ul>
<h2 id="proposed-pccm-scheme">Proposed PCCM Scheme</h2>
<p><img src="https://mob999.github.io/post-images/1717402364666.png" alt="" loading="lazy"><br>
ARs和CRs均开启缓存（ARs是直接连接到用户的CRs）。</p>
<h3 id="motivations">Motivations</h3>
<ul>
<li>对高流行度数据保持强一致性很有必要，对于低流行度数据弱一致性也够用（因为通常由数据生产方直接提供）。</li>
<li>ARs起关键作用，一方面可以评估本地内容流行度，另一方面可以通过用户发送的包来分享内容新鲜度。通过这种方式，路径上的CRs可以判断数据是否过时，而不需要与数据生产方通信。</li>
<li>服务器失效方法可以只追踪ARs，减少检查开销。</li>
</ul>
<h3 id="overview">Overview</h3>
<ul>
<li>ARs周期性预测内容流行度，且在生产方注册其地址用于发起更新通知。对于流行度低的数据，将根据剩余寿命确定是否更新。</li>
<li>这种混合方法目的是为了平衡一致性强度和网络开销。</li>
</ul>
<h3 id="new-defined-packet-types">New-Defined Packet Types</h3>
<figure data-type="image" tabindex="1"><img src="https://mob999.github.io/post-images/1717405139165.png" alt="" loading="lazy"></figure>
<h3 id="interactions-among-ar-cr-and-data-producers">Interactions Among AR, CR, and Data Producers</h3>
<figure data-type="image" tabindex="2"><img src="https://mob999.github.io/post-images/1717405915297.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[hello mob]]></title>
        <id>https://mob999.github.io/post/hello-mob/</id>
        <link href="https://mob999.github.io/post/hello-mob/">
        </link>
        <updated>2024-05-27T11:27:24.000Z</updated>
        <content type="html"><![CDATA[<p>记录生活，发发牢骚</p>
]]></content>
    </entry>
</feed>